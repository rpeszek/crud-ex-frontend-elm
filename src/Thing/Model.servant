{-
  'Thing' types and JSON parsing based on code generated by Servant
-}

--
-- Elm does not allow to re-export imported types 
-- (see https://github.com/elm-lang/elm-compiler/issues/931)
--
-- This module simply maps Thing and ThingEntity generated in Servant as type alias
-- to allow switching between previously 'hancoded' code and Servant compiled code.
--
-- Similarly JSON encoding/decoding logic generated by Servant is mapped to 
-- previusly defined (handcoded) function names.  
--

module Thing.Model exposing (..)

import FromServant.ThingApi as ServantGenerated 
import Json.Decode exposing (Decoder)
import Json.Encode as Encode

type alias ThingId = Int 

type alias ThingEntity = ServantGenerated.ThingEntity

type alias Thing = ServantGenerated.Thing

emptyThing = {name = "", description = "", userId = Nothing}

thingJsonDecoder : Decoder Thing
thingJsonDecoder = ServantGenerated.decodeThing

thingEntityJsonDecoder : Decoder ThingEntity
thingEntityJsonDecoder = ServantGenerated.decodeThingEntity

thingJsonEncoder : Thing -> Encode.Value
thingJsonEncoder = ServantGenerated.encodeThing
